package chunker

import (
	"io"
	"math"
	"math/rand"

	"github.com/alecthomas/units"
)

const (
	normalization = 2
	normalSize    = 8 * units.KB
)

type Chunker struct {
	minSize int
	avgSize int
	maxSize int

	maskS uint64
	maskL uint64

	data    io.Reader
	curData []byte
	cursor  int
	offset  int

	seed uint64

	closed bool
}

type Chunk struct {
	Offset      int
	Length      int
	Data        []byte
	Fingerprint uint64
}

type Options struct {
	AverageSize int
	Seed        int
}

func NewChunker(reader io.Reader) *Chunker {
	bits := int(math.Round(math.Log2(float64(normalSize))))

	c := &Chunker{
		minSize: int(normalSize) / 4,
		avgSize: int(normalSize),
		maxSize: int(normalSize) * 8,
		maskS:   uint64(mask(bits + normalization)),
		maskL:   uint64(mask(bits - normalization)),
		cursor:  int(normalSize) * 8 * 2,
		offset:  0,
		data:    reader,
		curData: make([]byte, normalSize*8*2),
		seed:    rand.Uint64(),
	}

	return c
}

func (c *Chunker) Next() (Chunk, error) {
	if err := c.getCurData(); err != nil {
		return Chunk{}, err
	}

	if len(c.curData) == 0 {
		return Chunk{}, io.EOF
	}

	chunk := c.getNextChunk()

	c.cursor += chunk.Length
	c.offset += chunk.Length

	return chunk, nil
}

func (c *Chunker) getCurData() error {
	n := len(c.curData) - c.cursor

	if n >= c.maxSize {
		return nil
	}

	copy(c.curData[:n], c.curData[c.cursor:])
	c.cursor = 0

	if c.closed {
		c.curData = c.curData[:n]
		return nil
	}

	bytesCopied, err := io.ReadFull(c.data, c.curData[n:])
	if err == io.EOF || err == io.ErrUnexpectedEOF {
		c.curData = c.curData[:n+bytesCopied]
		c.closed = true
	} else if err != nil {
		return err
	}

	return nil
}

func (c *Chunker) getNextChunk() Chunk {
	fp := uint64(0)
	i := c.minSize

	buf := c.curData[c.cursor:]

	if len(buf) <= c.minSize {
		return Chunk{
			Offset:      c.offset,
			Length:      len(buf),
			Data:        c.curData[c.cursor : c.cursor+len(buf)],
			Fingerprint: fp,
		}
	}

	n := min(len(buf), c.maxSize)

	for ; i < min(n, c.avgSize); i++ {
		fp = (fp << 1) + gearTable[buf[i]]
		if (fp & c.maskS) == 0 {
			return Chunk{Offset: c.offset, Length: i + 1, Data: c.curData[c.cursor : c.cursor+(i+1)], Fingerprint: fp}
		}
	}

	for ; i < n; i++ {
		fp = (fp << 1) + gearTable[buf[i]]
		if (fp & c.maskL) == 0 {
			return Chunk{Offset: c.offset, Length: i + 1, Data: c.curData[c.cursor : c.cursor+(i+1)], Fingerprint: fp}
		}
	}

	return Chunk{
		Offset:      c.offset,
		Length:      i,
		Data:        c.curData[c.cursor : c.cursor+i],
		Fingerprint: fp,
	}
}

func mask(bits int) int {
	return int(math.Pow(2, float64(bits))) - 1
}

var gearTable [256]uint64 = [256]uint64{
	17622039328593353755, 5292960901112933784, 9365345921162267264, 17244052283620308358,
	10858670183223706445, 4837177206968614308, 16546134040531468554, 6205873236745756864,
	2722758029832615536, 11131061417177458477, 2426247444644056912, 5426435431372162433,
	14393485537788094118, 17036226896378361614, 2539479956047813925, 4660111775162266678,
	3514411426141466328, 3870004447253497958, 14541249133040753943, 148464103025647943,
	8829316403229782526, 4853554952134270504, 18035470232409301567, 1952978909715727240,
	4408473742652158454, 7121026926856746812, 15935159141240555233, 13492633396393748554,
	16744116120442390597, 5128480862410342061, 7458797744305811577, 9030806322516307800,
	13054004890765771518, 2037527005053122699, 2764515578475239605, 9074168997018221434,
	8104037856566383258, 2662091420975944502, 10837142618335818697, 10946926727263460985,
	1928937071749719305, 18324533294313433906, 609857063318519540, 14838029296808548466,
	1545640224167701994, 621344045293973385, 14421133538177900428, 12045134462992042032,
	14347349883193289306, 8114729204681731230, 13873302256591262914, 6461250834267947270,
	4338611517866017463, 13992003460243831276, 13407524075586941234, 2498158532366333334,
	12692048730545753738, 17543885367163691489, 16942400855380880460, 7996894137925471092,
	17894524516770760894, 7288827995586669372, 3903639460289084826, 4479999890183305481,
	195348507342181313, 17581152609910962602, 9301050637125991845, 13547710888849114837,
	7647278848972575577, 17911214815220542541, 11368932133431108344, 6029780740959209896,
	12627010770615096084, 17625975356363995700, 17188408147471956685, 10098492221389916336,
	10614936115010531644, 18086083892667027446, 9333116224115708154, 4583883982022019045,
	2809390093547038526, 5955402817545370078, 9555410829968224897, 3377533593519566050,
	12986214761572594124, 8903918271289667291, 12402935164593963514, 10230064421133624726,
	17528058298280666151, 8406400209004237102, 13875552885172904872, 14279050926020919653,
	13872856152269321013, 5752710391319686009, 13836763131442642298, 5608855651177003421,
	11344501853433414065, 15137861076843381160, 5647918231654440718, 6466542940226416033,
	8628458480437133644, 9765686696261248120, 7632673236571645491, 13978095825156875617,
	15881341258614472049, 7145890606353810286, 11679452475305210081, 17646297542478918373,
	2909768470901703447, 8024089184934764520, 4378864722467679759, 17927583382268824129,
	6818980376848441656, 11213742560586417932, 5536488283137387637, 4347142472022671938,
	6582402952079189370, 2165702821988525914, 981735252602809645, 6778946842880673468,
	13003293497156150194, 148549424497327201, 15152011914133308048, 6137052726929199543,
	9388908732953710652, 6214025980876494866, 2500825623950049596, 8347337912157467316,
	14734324317553791082, 9864042277478707830, 16446382319826946509, 8210274770220463257,
	9392561795677631223, 16308892720340430043, 1976135470361695100, 13697447087969128228,
	13375739845433977559, 17631953797625774766, 7181781552686774372, 15017390471117637503,
	5056381282422157727, 8373962039570724741, 6906379537227689707, 6251674544489397603,
	15472903535128158326, 16033266734241075648, 1884825290599326673, 15926983762846989444,
	14191411264744947972, 2182180383705314237, 13846971810722360279, 3561160714884273939,
	1906357676244473377, 2885423834202201692, 12265508090821615509, 151846233604053989,
	2245435680639101391, 8153465692514966928, 17494592777355912268, 4767488957712417832,
	18424485181702808787, 13469101876028809099, 14361792884884785221, 13462134414288352744,
	7222023918243685134, 8556492635019320735, 17216899865566665515, 14213180457859314244,
	12758932580405516599, 15645554591140584916, 9778282108090584727, 8821047395268830545,
	17106689500556681201, 14089621738230163216, 12389911782340904389, 16712779199311814687,
	9176623398962602389, 5797886234404114153, 15483412132007635850, 11783494558557264703,
	4128621270719884434, 9491591039430264654, 3676546549665858943, 8156148252525762453,
	13937848362964392261, 9487613138565503645, 15343920535015653979, 16553108997107013436,
	4612988560509519969, 18167600234664685271, 11643275680870289271, 10011196147536440640,
	9143090640004074255, 18085990825702561840, 5784798029463909764, 4375227805289011153,
	13050012841730966744, 11163359039904910582, 8607500855913880698, 15863956320118434847,
	17446626371144675936, 3182446147000296475, 6018607988481374831, 12514531286835777158,
	16022467381135283756, 8150451368128072819, 9570232614669668180, 3643519985468766995,
	17027204230449041358, 7452230824238913680, 11349845580222301869, 10659521311084734827,
	14657966290995378112, 2828711804239045626, 14882264517110794929, 2372975447314455295,
	4237319953524005216, 5260711931405801847, 1425344675794150793, 47526219914731540,
	2186467219690246982, 2358467292858384859, 1726456187194348365, 14855850134116633098,
	3095122983846422056, 4963665892870767319, 16521493746706427547, 3016198526512191171,
	12023244367507516716, 334341695712895475, 7177501718262813548, 13446644099813003496,
	17842226752539273750, 7165340795197617577, 5549556071259783280, 10341509669110307808,
	3294855287430865199, 13998715758814926929, 5067358160678126770, 13637333918699300359,
	5904668229115898765, 2111504728116068067, 2235960357501838449, 14208837369355557745,
	12494794504631077494, 5412002114646960129, 3203234204220955657, 11136903089871277250,
	10002998915722924425, 15708364978478146687, 4517349935360913617, 10719426400839400195,
	13607139747041158414, 7409658760724425298, 14661983885539409336, 3326407731383165523,
}
